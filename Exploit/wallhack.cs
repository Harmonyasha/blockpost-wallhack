using MelonLoader;
using UnityEngine;
using UnityEngine.UI;
using Boo.Lang;
using static TestMod.Utility.Log;
using System;
using System.Collections.Generic;
using System.Threading;
using System.Linq;
using System.Collections;
using System.Threading.Tasks;
using TestMod.CustomEvent;

namespace TestMod.Exploit
{
    class wallhack
    {
        public static Canvas canvas;
        public static GameObject canvasObject;
        public static List table = new List();
        public static bool working = false;
        public static Camera camera = getcamera("Camera");
        public static class datasaver
        {


 


            public static void run()
            {
                Msg("Run");
                wallhack.working = !working;
                if (working)
                {
                    canvasObject = new GameObject("Canvas");
                    canvas = canvasObject.AddComponent<Canvas>();
                    canvas.renderMode = RenderMode.ScreenSpaceOverlay;
                    camera = getcamera("Camera");
                    UpdateAsync();
                    Msg("Scan");
                    scan();
                }
                else
                {
                    GameObject.Destroy(canvasObject);
                }
            }


            public static async Task UpdateAsync()
            {
                Msg("Image handler starting...");
                await Task.Run(() => MelonCoroutines.Start(update()));
                Msg("Image position updater starting...");
                await Task.Run(() => MelonCoroutines.Start(position()));
            }

            public static IEnumerator position()
            {
                while (working)
                {
                    yield return new WaitForSeconds(.05f);
                    foreach (List v in table)
                    {
                        if (GameObject.FindObjectFromInstanceID((int)v[2]))
                        {

                            GameObject plr = (GameObject)v[1];
                            Image followerImage = (Image)v[0];

                            Vector3 screenPoint = camera.WorldToViewportPoint(plr.transform.position);
                            Vector2 screenPosition = camera.WorldToScreenPoint(plr.transform.position);
                            if (screenPoint.z > 0 && screenPoint.x > 0 && screenPoint.x < 1 && screenPoint.y > 0 && screenPoint.y < 1)
                            {
                                followerImage.rectTransform.position = screenPosition;
                            }
                            else
                            {
                                followerImage.rectTransform.sizeDelta = new Vector2(0, 0);
                            }
                        }

                    }

                }
            }

                public static IEnumerator update()
            {


                while (working)
                {
                    yield return new WaitForSeconds(1f);

                   
                        GameObject.Destroy(canvasObject);
                        canvasObject = new GameObject("Canvas");
                        canvas = canvasObject.AddComponent<Canvas>();
                        canvas.renderMode = RenderMode.ScreenSpaceOverlay;
                    

                    int lenght = table.Count;
                    int i = 0;
              
                    foreach (List b in table)
                    {
                        i += 1;
                        GameObject.Destroy((Image)b[0]);

                        if (lenght == i)
                        {
                            wallhack.table.Clear();
                          
  
                            scan();

                            break;
                        }
                    }



                }
            }

        }




        private static Camera getcamera(string cumname)
        {

            foreach (Camera camera in Resources.FindObjectsOfTypeAll<Camera>())
            {
                if (camera.name == cumname)
                {
                    return camera;
                }
            }
            return null;
        }

        public static void scan()
        {
            Transform[] allObjects = Resources.FindObjectsOfTypeAll<Transform>().Where(go => go.name == "body").ToArray();
            foreach (Transform childTransform in allObjects)
            {

                Renderer renderer = childTransform.GetComponent<Renderer>();
                Color objectColor = Color.white;
                if (renderer != null && renderer.material != null)
                {
                    objectColor = renderer.material.color;
                }

                createimage(childTransform.gameObject, objectColor);

                //createimage(childTransform, objectColor);


            }

        }

        static void createimage(GameObject plr, Color color)
        {


            Image followerImage;
            GameObject imageObject;
            imageObject = new GameObject("FollowerImage");
            followerImage = imageObject.AddComponent<Image>();
            followerImage.transform.SetParent(canvas.transform);
            followerImage.rectTransform.sizeDelta = new Vector2(15, 15); // Устанавливаем размеры изображения
            Color imageColor = color;
            imageColor.a = .5f; // Устанавливаем прозрачность (0 - полностью прозрачный, 1 - непрозрачный)
            followerImage.color = imageColor;
            table.Add(new List() { followerImage ,plr,plr.GetInstanceID() });



        }




    }
}
